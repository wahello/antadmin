// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/antbiz/antadmin/db/smc/ent/menu"
)

// Menu is the model entity for the Menu schema.
type Menu struct {
	config `json:"-"`
	// ID of the ent.
	// 编号
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	// 删除时间
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// CreatedBy holds the value of the "createdBy" field.
	// 创建者
	CreatedBy string `json:"createdBy,omitempty"`
	// UpdatedBy holds the value of the "updatedBy" field.
	// 修改者
	UpdatedBy string `json:"updatedBy,omitempty"`
	// Name holds the value of the "name" field.
	// 菜单名称
	Name string `json:"name,omitempty"`
	// Hide holds the value of the "hide" field.
	// 是否隐藏
	Hide bool `json:"hide,omitempty"`
	// Path holds the value of the "path" field.
	// 菜单路由
	Path string `json:"path,omitempty"`
	// Sort holds the value of the "sort" field.
	// 展示顺序
	Sort int `json:"sort,omitempty"`
	// Icon holds the value of the "icon" field.
	// 图标
	Icon string `json:"icon,omitempty"`
	// Parent holds the value of the "parent" field.
	// 上级菜单
	Parent string `json:"parent,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Menu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case menu.FieldHide:
			values[i] = new(sql.NullBool)
		case menu.FieldSort:
			values[i] = new(sql.NullInt64)
		case menu.FieldID, menu.FieldCreatedBy, menu.FieldUpdatedBy, menu.FieldName, menu.FieldPath, menu.FieldIcon, menu.FieldParent:
			values[i] = new(sql.NullString)
		case menu.FieldCreatedAt, menu.FieldUpdatedAt, menu.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Menu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Menu fields.
func (m *Menu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menu.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				m.ID = value.String
			}
		case menu.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case menu.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case menu.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				m.DeletedAt = new(time.Time)
				*m.DeletedAt = value.Time
			}
		case menu.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createdBy", values[i])
			} else if value.Valid {
				m.CreatedBy = value.String
			}
		case menu.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updatedBy", values[i])
			} else if value.Valid {
				m.UpdatedBy = value.String
			}
		case menu.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case menu.FieldHide:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hide", values[i])
			} else if value.Valid {
				m.Hide = value.Bool
			}
		case menu.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				m.Path = value.String
			}
		case menu.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				m.Sort = int(value.Int64)
			}
		case menu.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				m.Icon = value.String
			}
		case menu.FieldParent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent", values[i])
			} else if value.Valid {
				m.Parent = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Menu.
// Note that you need to call Menu.Unwrap() before calling this method if this Menu
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Menu) Update() *MenuUpdateOne {
	return (&MenuClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Menu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Menu) Unwrap() *Menu {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Menu is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Menu) String() string {
	var builder strings.Builder
	builder.WriteString("Menu(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	if v := m.DeletedAt; v != nil {
		builder.WriteString(", deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", createdBy=")
	builder.WriteString(m.CreatedBy)
	builder.WriteString(", updatedBy=")
	builder.WriteString(m.UpdatedBy)
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", hide=")
	builder.WriteString(fmt.Sprintf("%v", m.Hide))
	builder.WriteString(", path=")
	builder.WriteString(m.Path)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", m.Sort))
	builder.WriteString(", icon=")
	builder.WriteString(m.Icon)
	builder.WriteString(", parent=")
	builder.WriteString(m.Parent)
	builder.WriteByte(')')
	return builder.String()
}

// Menus is a parsable slice of Menu.
type Menus []*Menu

func (m Menus) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
