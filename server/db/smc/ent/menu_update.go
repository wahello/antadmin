// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/antbiz/antadmin/db/smc/ent/menu"
	"github.com/antbiz/antadmin/db/smc/ent/predicate"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where adds a new predicate for the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetUpdatedAt sets the "updatedAt" field.
func (mu *MenuUpdate) SetUpdatedAt(t time.Time) *MenuUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deletedAt" field.
func (mu *MenuUpdate) SetDeletedAt(t time.Time) *MenuUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableDeletedAt(t *time.Time) *MenuUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (mu *MenuUpdate) ClearDeletedAt() *MenuUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetCreatedBy sets the "createdBy" field.
func (mu *MenuUpdate) SetCreatedBy(s string) *MenuUpdate {
	mu.mutation.SetCreatedBy(s)
	return mu
}

// SetNillableCreatedBy sets the "createdBy" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableCreatedBy(s *string) *MenuUpdate {
	if s != nil {
		mu.SetCreatedBy(*s)
	}
	return mu
}

// ClearCreatedBy clears the value of the "createdBy" field.
func (mu *MenuUpdate) ClearCreatedBy() *MenuUpdate {
	mu.mutation.ClearCreatedBy()
	return mu
}

// SetUpdatedBy sets the "updatedBy" field.
func (mu *MenuUpdate) SetUpdatedBy(s string) *MenuUpdate {
	mu.mutation.SetUpdatedBy(s)
	return mu
}

// SetNillableUpdatedBy sets the "updatedBy" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableUpdatedBy(s *string) *MenuUpdate {
	if s != nil {
		mu.SetUpdatedBy(*s)
	}
	return mu
}

// ClearUpdatedBy clears the value of the "updatedBy" field.
func (mu *MenuUpdate) ClearUpdatedBy() *MenuUpdate {
	mu.mutation.ClearUpdatedBy()
	return mu
}

// SetName sets the "name" field.
func (mu *MenuUpdate) SetName(s string) *MenuUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetHide sets the "hide" field.
func (mu *MenuUpdate) SetHide(b bool) *MenuUpdate {
	mu.mutation.SetHide(b)
	return mu
}

// SetNillableHide sets the "hide" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableHide(b *bool) *MenuUpdate {
	if b != nil {
		mu.SetHide(*b)
	}
	return mu
}

// SetPath sets the "path" field.
func (mu *MenuUpdate) SetPath(s string) *MenuUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetSort sets the "sort" field.
func (mu *MenuUpdate) SetSort(i int) *MenuUpdate {
	mu.mutation.ResetSort()
	mu.mutation.SetSort(i)
	return mu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableSort(i *int) *MenuUpdate {
	if i != nil {
		mu.SetSort(*i)
	}
	return mu
}

// AddSort adds i to the "sort" field.
func (mu *MenuUpdate) AddSort(i int) *MenuUpdate {
	mu.mutation.AddSort(i)
	return mu
}

// SetIcon sets the "icon" field.
func (mu *MenuUpdate) SetIcon(s string) *MenuUpdate {
	mu.mutation.SetIcon(s)
	return mu
}

// SetParent sets the "parent" field.
func (mu *MenuUpdate) SetParent(s string) *MenuUpdate {
	mu.mutation.SetParent(s)
	return mu
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MenuUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MenuUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Path(); ok {
		if err := menu.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf("ent: validator failed for field \"path\": %w", err)}
		}
	}
	return nil
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: menu.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldDeletedAt,
		})
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: menu.FieldDeletedAt,
		})
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldCreatedBy,
		})
	}
	if mu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldCreatedBy,
		})
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldUpdatedBy,
		})
	}
	if mu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldUpdatedBy,
		})
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldName,
		})
	}
	if value, ok := mu.mutation.Hide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: menu.FieldHide,
		})
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldPath,
		})
	}
	if value, ok := mu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldSort,
		})
	}
	if value, ok := mu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldSort,
		})
	}
	if value, ok := mu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldIcon,
		})
	}
	if value, ok := mu.mutation.Parent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldParent,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetUpdatedAt sets the "updatedAt" field.
func (muo *MenuUpdateOne) SetUpdatedAt(t time.Time) *MenuUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deletedAt" field.
func (muo *MenuUpdateOne) SetDeletedAt(t time.Time) *MenuUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableDeletedAt(t *time.Time) *MenuUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (muo *MenuUpdateOne) ClearDeletedAt() *MenuUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetCreatedBy sets the "createdBy" field.
func (muo *MenuUpdateOne) SetCreatedBy(s string) *MenuUpdateOne {
	muo.mutation.SetCreatedBy(s)
	return muo
}

// SetNillableCreatedBy sets the "createdBy" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableCreatedBy(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetCreatedBy(*s)
	}
	return muo
}

// ClearCreatedBy clears the value of the "createdBy" field.
func (muo *MenuUpdateOne) ClearCreatedBy() *MenuUpdateOne {
	muo.mutation.ClearCreatedBy()
	return muo
}

// SetUpdatedBy sets the "updatedBy" field.
func (muo *MenuUpdateOne) SetUpdatedBy(s string) *MenuUpdateOne {
	muo.mutation.SetUpdatedBy(s)
	return muo
}

// SetNillableUpdatedBy sets the "updatedBy" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableUpdatedBy(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetUpdatedBy(*s)
	}
	return muo
}

// ClearUpdatedBy clears the value of the "updatedBy" field.
func (muo *MenuUpdateOne) ClearUpdatedBy() *MenuUpdateOne {
	muo.mutation.ClearUpdatedBy()
	return muo
}

// SetName sets the "name" field.
func (muo *MenuUpdateOne) SetName(s string) *MenuUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetHide sets the "hide" field.
func (muo *MenuUpdateOne) SetHide(b bool) *MenuUpdateOne {
	muo.mutation.SetHide(b)
	return muo
}

// SetNillableHide sets the "hide" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableHide(b *bool) *MenuUpdateOne {
	if b != nil {
		muo.SetHide(*b)
	}
	return muo
}

// SetPath sets the "path" field.
func (muo *MenuUpdateOne) SetPath(s string) *MenuUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetSort sets the "sort" field.
func (muo *MenuUpdateOne) SetSort(i int) *MenuUpdateOne {
	muo.mutation.ResetSort()
	muo.mutation.SetSort(i)
	return muo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableSort(i *int) *MenuUpdateOne {
	if i != nil {
		muo.SetSort(*i)
	}
	return muo
}

// AddSort adds i to the "sort" field.
func (muo *MenuUpdateOne) AddSort(i int) *MenuUpdateOne {
	muo.mutation.AddSort(i)
	return muo
}

// SetIcon sets the "icon" field.
func (muo *MenuUpdateOne) SetIcon(s string) *MenuUpdateOne {
	muo.mutation.SetIcon(s)
	return muo
}

// SetParent sets the "parent" field.
func (muo *MenuUpdateOne) SetParent(s string) *MenuUpdateOne {
	muo.mutation.SetParent(s)
	return muo
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	var (
		err  error
		node *Menu
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MenuUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MenuUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Path(); ok {
		if err := menu.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf("ent: validator failed for field \"path\": %w", err)}
		}
	}
	return nil
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: menu.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Menu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldDeletedAt,
		})
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: menu.FieldDeletedAt,
		})
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldCreatedBy,
		})
	}
	if muo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldCreatedBy,
		})
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldUpdatedBy,
		})
	}
	if muo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldUpdatedBy,
		})
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldName,
		})
	}
	if value, ok := muo.mutation.Hide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: menu.FieldHide,
		})
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldPath,
		})
	}
	if value, ok := muo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldSort,
		})
	}
	if value, ok := muo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldSort,
		})
	}
	if value, ok := muo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldIcon,
		})
	}
	if value, ok := muo.mutation.Parent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldParent,
		})
	}
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
